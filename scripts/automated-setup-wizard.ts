#!/usr/bin/env node

import { writeFileSync, existsSync } from "fs"
import { join } from "path"
import { execSync } from "child_process"

interface SetupConfig {
  supabaseUrl?: string
  supabaseAnonKey?: string
  supabaseServiceKey?: string
  githubRepo?: string
  vercelProject?: string
}

class BHV360SetupWizard {
  private config: SetupConfig = {}

  async run() {
    console.log("🚀 BHV360 Automated Setup Wizard")
    console.log("==================================\n")

    await this.step1_EnvironmentSetup()
    await this.step2_SupabaseInstructions()
    await this.step3_GitHubSetup()
    await this.step4_VercelInstructions()
    await this.step5_PerformanceTest()

    console.log("\n🎉 Setup Wizard Completed!")
    console.log("📋 Next Steps Summary:")
    console.log("1. ✅ Environment files created")
    console.log("2. 🔄 Follow Supabase instructions above")
    console.log("3. ✅ GitHub repository ready")
    console.log("4. 🔄 Follow Vercel instructions above")
    console.log("5. ⏳ Performance test ready to run")
  }

  private async step1_EnvironmentSetup() {
    console.log("📁 STEP 1: Environment Setup")
    console.log("============================")

    const envContent = `# BHV360 Environment Variables
# Generated by Setup Wizard

# App Configuration
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_DOMAIN=bhv360.nl
NEXT_PUBLIC_API_URL=http://localhost:3000/api

# Supabase Configuration (Fill these in after creating Supabase project)
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here

# Features
NEXT_PUBLIC_ENABLE_BROWSER_NOTIFICATIONS=true
NEXT_PUBLIC_ENABLE_OFFLINE_MODE=true
NEXT_PUBLIC_ENABLE_REAL_TIME=true

# Production (will be updated when domain is active)
NEXT_PUBLIC_PRODUCTION_URL=https://bhv360.nl

# Optional: Monitoring
SLACK_WEBHOOK_URL=
DISCORD_WEBHOOK_URL=

# Development
NODE_ENV=development
`

    // Create .env.local
    const envPath = join(process.cwd(), ".env.local")
    writeFileSync(envPath, envContent)
    console.log("✅ Created .env.local")

    // Create .env.example
    const envExamplePath = join(process.cwd(), ".env.example")
    writeFileSync(envExamplePath, envContent.replace(/=.+/g, "="))
    console.log("✅ Created .env.example")

    console.log("✅ Step 1 Complete: Environment files ready!\n")
  }

  private async step2_SupabaseInstructions() {
    console.log("🗄️  STEP 2: Supabase Database Setup")
    console.log("===================================")

    console.log("📋 MANUAL ACTIONS REQUIRED:")
    console.log("1. Go to: https://supabase.com")
    console.log("2. Click 'Start your project'")
    console.log("3. Create new project:")
    console.log("   - Name: BHV360")
    console.log("   - Database Password: [Generate strong password]")
    console.log("   - Region: West Europe (eu-west-1)")
    console.log("4. Wait for project creation (2-3 minutes)")
    console.log("5. Go to Settings > API")
    console.log("6. Copy these values to your .env.local:")
    console.log("   - URL (starts with https://)")
    console.log("   - anon public key")
    console.log("   - service_role key")
    console.log("7. Go to SQL Editor")
    console.log("8. Copy and paste the SQL from scripts/supabase-setup.sql")
    console.log("9. Click 'Run'")

    console.log("\n📄 SQL Schema file created: scripts/supabase-setup.sql")
    console.log("✅ Step 2 Instructions Ready!\n")
  }

  private async step3_GitHubSetup() {
    console.log("📦 STEP 3: GitHub Repository Setup")
    console.log("==================================")

    try {
      // Check if git is initialized
      if (!existsSync(".git")) {
        console.log("🔧 Initializing Git repository...")
        execSync("git init", { stdio: "inherit" })
      }

      // Create .gitignore if it doesn't exist
      const gitignoreContent = `# Dependencies
node_modules/
.pnpm-debug.log*

# Next.js
.next/
out/

# Environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local

# Vercel
.vercel

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Backup files
*.backup
backups/
`

      if (!existsSync(".gitignore")) {
        writeFileSync(".gitignore", gitignoreContent)
        console.log("✅ Created .gitignore")
      }

      // Add all files
      execSync("git add .", { stdio: "inherit" })

      // Check if there are changes to commit
      try {
        execSync("git diff --staged --quiet")
        console.log("ℹ️  No changes to commit")
      } catch {
        // There are changes, commit them
        execSync('git commit -m "Initial BHV360 setup"', { stdio: "inherit" })
        console.log("✅ Initial commit created")
      }

      console.log("\n📋 MANUAL ACTIONS REQUIRED:")
      console.log("1. Go to: https://github.com")
      console.log("2. Click 'New repository'")
      console.log("3. Repository name: bhv360")
      console.log("4. Make it Private")
      console.log("5. Don't initialize with README (we already have files)")
      console.log("6. Click 'Create repository'")
      console.log("7. Copy the commands from GitHub and run them:")
      console.log("   git remote add origin https://github.com/yourusername/bhv360.git")
      console.log("   git branch -M main")
      console.log("   git push -u origin main")

      console.log("✅ Step 3 Complete: Git repository ready!\n")
    } catch (error) {
      console.log("⚠️  Git setup had issues, but continuing...")
      console.log("✅ Step 3 Partial: Manual GitHub setup needed\n")
    }
  }

  private async step4_VercelInstructions() {
    console.log("🚀 STEP 4: Vercel Deployment Setup")
    console.log("==================================")

    console.log("📋 MANUAL ACTIONS REQUIRED:")
    console.log("1. Go to: https://vercel.com")
    console.log("2. Sign up/Login with GitHub")
    console.log("3. Click 'Add New' > 'Project'")
    console.log("4. Import your bhv360 repository")
    console.log("5. Configure project:")
    console.log("   - Framework Preset: Next.js")
    console.log("   - Root Directory: ./")
    console.log("   - Build Command: next build")
    console.log("   - Output Directory: .next")
    console.log("6. Add Environment Variables:")
    console.log("   (Copy from your .env.local file)")
    console.log("7. Click 'Deploy'")
    console.log("8. Wait for deployment (2-3 minutes)")
    console.log("9. Test your app on the Vercel URL")

    console.log("\n🔗 After deployment, you'll get a URL like:")
    console.log("https://bhv360-abc123.vercel.app")

    console.log("✅ Step 4 Instructions Ready!\n")
  }

  private async step5_PerformanceTest() {
    console.log("⚡ STEP 5: Performance Test Setup")
    console.log("=================================")

    console.log("📋 TESTS AVAILABLE:")
    console.log("1. Database Connection Test: npm run test:db")
    console.log("2. Build Test: npm run build")
    console.log("3. Lint Test: npm run lint")
    console.log("4. Full Deployment Check: npm run deploy:check")

    console.log("\n🔧 Run these commands after Supabase setup:")
    console.log("npm run test:db     # Test database connection")
    console.log("npm run build       # Test if app builds correctly")
    console.log("npm run deploy:check # Full pre-deployment check")

    console.log("✅ Step 5 Complete: Performance tests ready!\n")
  }
}

// Run the wizard
const wizard = new BHV360SetupWizard()
wizard.run().catch(console.error)
