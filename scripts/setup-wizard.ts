#!/usr/bin/env node

import { execSync } from "child_process"
import { writeFileSync, existsSync, readFileSync } from "fs"
import { join } from "path"
import readline from "readline"

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

interface SetupConfig {
  supabaseUrl: string
  supabaseAnonKey: string
  supabaseServiceKey: string
  appUrl: string
  domain?: string
  slackWebhook?: string
}

class BHV360SetupWizard {
  private config: Partial<SetupConfig> = {}

  async run() {
    console.log("üöÄ BHV360 Setup Wizard")
    console.log("======================")
    console.log("Deze wizard helpt je BHV360 veilig live te zetten.\n")

    try {
      await this.checkPrerequisites()
      await this.collectConfiguration()
      await this.validateConfiguration()
      await this.createEnvironmentFiles()
      await this.setupDatabase()
      await this.runTests()
      await this.prepareDeployment()

      console.log("\n‚úÖ Setup voltooid!")
      console.log("Je kunt nu deployen naar Vercel met: npm run deploy")
    } catch (error) {
      console.error("\n‚ùå Setup mislukt:", error)
      process.exit(1)
    } finally {
      rl.close()
    }
  }

  private async checkPrerequisites() {
    console.log("üìã Controleren van vereisten...")

    const requirements = [
      { command: "node --version", name: "Node.js" },
      { command: "npm --version", name: "npm" },
      { command: "git --version", name: "Git" },
    ]

    for (const req of requirements) {
      try {
        const version = execSync(req.command, { encoding: "utf8" }).trim()
        console.log(`‚úÖ ${req.name}: ${version}`)
      } catch (error) {
        throw new Error(`‚ùå ${req.name} is niet ge√Ønstalleerd`)
      }
    }

    // Check if we're in the right directory
    if (!existsSync("package.json")) {
      throw new Error("‚ùå Voer dit script uit in de root van je BHV360 project")
    }

    console.log("‚úÖ Alle vereisten zijn aanwezig\n")
  }

  private async collectConfiguration() {
    console.log("‚öôÔ∏è  Configuratie verzamelen...")

    this.config.supabaseUrl = await this.askQuestion("üîó Supabase Project URL (bijv. https://abc123.supabase.co): ")

    this.config.supabaseAnonKey = await this.askQuestion(
      "üîë Supabase Anon Key (begint met eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...): ",
    )

    this.config.supabaseServiceKey = await this.askQuestion(
      "üîê Supabase Service Role Key (begint met eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...): ",
    )

    this.config.appUrl = await this.askQuestion("üåê App URL (bijv. https://bhv360.vercel.app): ")

    const wantsDomain = await this.askQuestion("üè∑Ô∏è  Heb je een eigen domain? (y/n): ")

    if (wantsDomain.toLowerCase() === "y") {
      this.config.domain = await this.askQuestion("üåç Je domain (bijv. bhv360.nl): ")
    }

    const wantsSlack = await this.askQuestion("üì¢ Wil je Slack notificaties? (y/n): ")

    if (wantsSlack.toLowerCase() === "y") {
      this.config.slackWebhook = await this.askQuestion("üîó Slack Webhook URL: ")
    }

    console.log("\n‚úÖ Configuratie verzameld")
  }

  private async validateConfiguration() {
    console.log("üîç Configuratie valideren...")

    // Validate Supabase URL
    if (!this.config.supabaseUrl?.includes("supabase.co")) {
      throw new Error("‚ùå Ongeldige Supabase URL")
    }

    // Validate keys
    if (!this.config.supabaseAnonKey?.startsWith("eyJ")) {
      throw new Error("‚ùå Ongeldige Supabase Anon Key")
    }

    if (!this.config.supabaseServiceKey?.startsWith("eyJ")) {
      throw new Error("‚ùå Ongeldige Supabase Service Key")
    }

    // Test Supabase connection
    try {
      const response = await fetch(`${this.config.supabaseUrl}/rest/v1/`, {
        headers: {
          apikey: this.config.supabaseAnonKey!,
          Authorization: `Bearer ${this.config.supabaseAnonKey}`,
        },
      })

      if (!response.ok) {
        throw new Error("Supabase connectie mislukt")
      }

      console.log("‚úÖ Supabase connectie succesvol")
    } catch (error) {
      throw new Error(`‚ùå Kan niet verbinden met Supabase: ${error}`)
    }

    console.log("‚úÖ Configuratie is geldig\n")
  }

  private async createEnvironmentFiles() {
    console.log("üìù Environment bestanden aanmaken...")

    const envContent = `# BHV360 Environment Configuration
# Generated by Setup Wizard on ${new Date().toISOString()}

# App Configuration
NEXT_PUBLIC_APP_URL=${this.config.appUrl}

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=${this.config.supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${this.config.supabaseAnonKey}
SUPABASE_SERVICE_ROLE_KEY=${this.config.supabaseServiceKey}

# Database URLs (auto-generated)
POSTGRES_URL=${this.config.supabaseUrl?.replace("https://", "postgresql://postgres:[YOUR-PASSWORD]@").replace(".supabase.co", ".pooler.supabase.com:6543/postgres")}
POSTGRES_PRISMA_URL=${this.config.supabaseUrl?.replace("https://", "postgresql://postgres:[YOUR-PASSWORD]@").replace(".supabase.co", ".pooler.supabase.com:6543/postgres?pgbouncer=true&connect_timeout=15")}

# Browser Notifications
NEXT_PUBLIC_ENABLE_BROWSER_NOTIFICATIONS=true

# Optional: Monitoring
${this.config.slackWebhook ? `SLACK_WEBHOOK_URL=${this.config.slackWebhook}` : "# SLACK_WEBHOOK_URL=your-slack-webhook-url"}

# Security
NEXTAUTH_SECRET=${this.generateSecret()}
NEXTAUTH_URL=${this.config.appUrl}
`

    // Create .env.local for development
    writeFileSync(".env.local", envContent)
    console.log("‚úÖ .env.local aangemaakt")

    // Create .env.example for repository
    const exampleContent = envContent.replace(/=.+$/gm, "=your-value-here")
    writeFileSync(".env.example", exampleContent)
    console.log("‚úÖ .env.example aangemaakt")

    // Create Vercel environment file
    const vercelEnv = {
      NEXT_PUBLIC_APP_URL: this.config.appUrl,
      NEXT_PUBLIC_SUPABASE_URL: this.config.supabaseUrl,
      NEXT_PUBLIC_SUPABASE_ANON_KEY: this.config.supabaseAnonKey,
      SUPABASE_SERVICE_ROLE_KEY: this.config.supabaseServiceKey,
      NEXT_PUBLIC_ENABLE_BROWSER_NOTIFICATIONS: "true",
      NEXTAUTH_SECRET: this.generateSecret(),
      NEXTAUTH_URL: this.config.appUrl,
      ...(this.config.slackWebhook && { SLACK_WEBHOOK_URL: this.config.slackWebhook }),
    }

    writeFileSync("vercel-env.json", JSON.stringify(vercelEnv, null, 2))
    console.log("‚úÖ vercel-env.json aangemaakt voor deployment")

    console.log("‚úÖ Environment bestanden aangemaakt\n")
  }

  private async setupDatabase() {
    console.log("üóÑÔ∏è  Database setup...")

    const schemaPath = join(process.cwd(), "scripts", "database-schema.sql")

    if (!existsSync(schemaPath)) {
      console.log("üìù Database schema aanmaken...")
      await this.createDatabaseSchema()
    }

    console.log("‚úÖ Database schema gereed")
    console.log("‚ö†Ô∏è  Voer het schema handmatig uit in je Supabase SQL Editor:")
    console.log(`   üìÅ Bestand: ${schemaPath}`)

    await this.askQuestion("Druk Enter wanneer je het schema hebt uitgevoerd...")
    console.log("‚úÖ Database setup voltooid\n")
  }

  private async runTests() {
    console.log("üß™ Tests uitvoeren...")

    try {
      // Install dependencies if needed
      if (!existsSync("node_modules")) {
        console.log("üì¶ Dependencies installeren...")
        execSync("npm install", { stdio: "inherit" })
      }

      // Build the project
      console.log("üî® Project bouwen...")
      execSync("npm run build", { stdio: "inherit" })

      console.log("‚úÖ Build succesvol")

      // Run basic tests
      console.log("üîç Basic tests uitvoeren...")

      // Test if environment variables are loaded
      const testEnv = `
const { supabase } = require('./lib/supabase');
console.log('Supabase client:', supabase ? '‚úÖ OK' : '‚ùå FAIL');
process.exit(supabase ? 0 : 1);
`
      writeFileSync("test-env.js", testEnv)

      try {
        execSync("node test-env.js", { stdio: "inherit" })
        console.log("‚úÖ Environment test geslaagd")
      } catch (error) {
        throw new Error("‚ùå Environment test mislukt")
      } finally {
        // Cleanup
        if (existsSync("test-env.js")) {
          execSync("rm test-env.js")
        }
      }
    } catch (error) {
      throw new Error(`Tests mislukt: ${error}`)
    }

    console.log("‚úÖ Alle tests geslaagd\n")
  }

  private async prepareDeployment() {
    console.log("üöÄ Deployment voorbereiden...")

    // Create deployment script
    const deployScript = `#!/bin/bash
# BHV360 Deployment Script
# Generated by Setup Wizard

echo "üöÄ BHV360 Deployment Starting..."

# Check if we're on the right branch
BRANCH=$(git branch --show-current)
if [ "$BRANCH" != "main" ]; then
  echo "‚ö†Ô∏è  Warning: Not on main branch (current: $BRANCH)"
  read -p "Continue? (y/n): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

# Run final tests
echo "üß™ Running final tests..."
npm run build

# Deploy to Vercel
echo "üöÄ Deploying to Vercel..."
npx vercel --prod

echo "‚úÖ Deployment complete!"
echo "üåê Your app should be live at: ${this.config.appUrl}"
`

    writeFileSync("deploy.sh", deployScript)
    execSync("chmod +x deploy.sh")
    console.log("‚úÖ Deployment script aangemaakt (deploy.sh)")

    // Create package.json scripts if they don't exist
    const packageJson = JSON.parse(readFileSync("package.json", "utf8"))

    if (!packageJson.scripts) {
      packageJson.scripts = {}
    }

    packageJson.scripts = {
      ...packageJson.scripts,
      deploy: "./deploy.sh",
      setup: "node scripts/setup-wizard.js",
      validate: "node scripts/validate-setup.js",
    }

    writeFileSync("package.json", JSON.stringify(packageJson, null, 2))
    console.log("‚úÖ Package.json scripts toegevoegd")

    console.log("‚úÖ Deployment voorbereid\n")
  }

  private async createDatabaseSchema() {
    const schema = `-- BHV360 Database Schema
-- Auto-generated by Setup Wizard

-- Enable Row Level Security
ALTER DATABASE postgres SET "app.jwt_secret" TO 'your-jwt-secret';

-- Customers table
CREATE TABLE IF NOT EXISTS customers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    active BOOLEAN DEFAULT true,
    buildings INTEGER DEFAULT 0,
    users INTEGER DEFAULT 0,
    status VARCHAR(50) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(50),
    role VARCHAR(100),
    department VARCHAR(100),
    bhv_roles JSONB DEFAULT '[]',
    active BOOLEAN DEFAULT true,
    last_login TIMESTAMP WITH TIME ZONE,
    photo_url TEXT,
    emergency_contact JSONB,
    certificates JSONB,
    accessibility JSONB,
    work_schedule JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Facilities table
CREATE TABLE IF NOT EXISTS facilities (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id),
    name VARCHAR(255) NOT NULL,
    type VARCHAR(100) NOT NULL,
    building VARCHAR(100),
    floor VARCHAR(50),
    zone VARCHAR(50),
    nfc_tag_id VARCHAR(100),
    status VARCHAR(50) DEFAULT 'active',
    last_inspection TIMESTAMP WITH TIME ZONE,
    next_inspection TIMESTAMP WITH TIME ZONE,
    last_maintenance TIMESTAMP WITH TIME ZONE,
    next_maintenance TIMESTAMP WITH TIME ZONE,
    serial_number VARCHAR(100),
    manufacturer VARCHAR(100),
    model VARCHAR(100),
    installation_date DATE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- NFC Tags table
CREATE TABLE IF NOT EXISTS nfc_tags (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id),
    name VARCHAR(255) NOT NULL,
    uid VARCHAR(100) UNIQUE NOT NULL,
    type VARCHAR(50),
    location VARCHAR(255),
    building VARCHAR(100),
    floor VARCHAR(50),
    zone VARCHAR(50),
    status VARCHAR(50) DEFAULT 'active',
    battery_level INTEGER DEFAULT 100,
    last_seen TIMESTAMP WITH TIME ZONE,
    last_scanned TIMESTAMP WITH TIME ZONE,
    assigned_to VARCHAR(255),
    notes TEXT,
    tag_type VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Plotkaart Data table
CREATE TABLE IF NOT EXISTS plotkaart_data (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id),
    floors JSONB DEFAULT '[]',
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_by VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Incidents table
CREATE TABLE IF NOT EXISTS incidents (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    type VARCHAR(100) NOT NULL,
    severity VARCHAR(50) DEFAULT 'medium',
    status VARCHAR(50) DEFAULT 'open',
    location VARCHAR(255),
    building VARCHAR(100),
    floor VARCHAR(50),
    reported_by INTEGER REFERENCES users(id),
    assigned_to INTEGER REFERENCES users(id),
    resolved_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Performance Metrics table
CREATE TABLE IF NOT EXISTS performance_metrics (
    id SERIAL PRIMARY KEY,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    cpu_usage DECIMAL(5,2),
    memory_usage DECIMAL(5,2),
    disk_usage DECIMAL(5,2),
    response_time INTEGER,
    active_users INTEGER,
    requests_per_minute INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert sample data
INSERT INTO customers (name, active, buildings, users, status) VALUES 
('Demo Bedrijf BV', true, 3, 25, 'active'),
('Test Organisatie', true, 1, 10, 'active'),
('Provincie Noord-Brabant', true, 5, 50, 'active')
ON CONFLICT DO NOTHING;

-- Sample users for Demo Bedrijf BV (customer_id = 1)
INSERT INTO users (customer_id, name, email, phone, role, department, bhv_roles, active) VALUES
(1, 'Jan de Vries', 'jan@demobedrijf.nl', '06-12345678', 'admin', 'IT', '["Coordinator BHV"]', true),
(1, 'Marie Jansen', 'marie@demobedrijf.nl', '06-87654321', 'bhv-coordinator', 'HR', '["Ploegleider", "EHBO"]', true),
(1, 'Piet Bakker', 'piet@demobedrijf.nl', '06-11223344', 'bhv', 'Facilitair', '["BHV", "Ontruimer"]', true),
(1, 'Lisa van Dam', 'lisa@demobedrijf.nl', '06-55667788', 'user', 'Marketing', '[]', true),
(1, 'Tom Hendriks', 'tom@demobedrijf.nl', '06-99887766', 'ehbo', 'Verkoop', '["EHBO"]', true)
ON CONFLICT DO NOTHING;

-- Sample facilities for Demo Bedrijf BV
INSERT INTO facilities (customer_id, name, type, building, floor, zone, status) VALUES
(1, 'Brandblusser A1-01', 'Brandblusser', 'Hoofdgebouw', 'Begane grond', 'A1', 'active'),
(1, 'EHBO-post Receptie', 'EHBO-post', 'Hoofdgebouw', 'Begane grond', 'Receptie', 'active'),
(1, 'Nooduitgang Oost', 'Nooduitgang', 'Hoofdgebouw', 'Begane grond', 'Oost', 'active'),
(1, 'AED Kantine', 'AED', 'Hoofdgebouw', '1e verdieping', 'Kantine', 'active'),
(1, 'Brandmelder Gang', 'Brandmelder', 'Hoofdgebouw', '1e verdieping', 'Gang', 'active')
ON CONFLICT DO NOTHING;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_customer_id ON users(customer_id);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_facilities_customer_id ON facilities(customer_id);
CREATE INDEX IF NOT EXISTS idx_nfc_tags_customer_id ON nfc_tags(customer_id);
CREATE INDEX IF NOT EXISTS idx_nfc_tags_uid ON nfc_tags(uid);
CREATE INDEX IF NOT EXISTS idx_incidents_customer_id ON incidents(customer_id);
CREATE INDEX IF NOT EXISTS idx_incidents_status ON incidents(status);
CREATE INDEX IF NOT EXISTS idx_performance_metrics_timestamp ON performance_metrics(timestamp);

-- Enable Row Level Security
ALTER TABLE customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE facilities ENABLE ROW LEVEL SECURITY;
ALTER TABLE nfc_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE plotkaart_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE incidents ENABLE ROW LEVEL SECURITY;

-- Create policies (basic - customize based on your auth needs)
CREATE POLICY "Enable read access for all users" ON customers FOR SELECT USING (true);
CREATE POLICY "Enable all access for authenticated users" ON customers FOR ALL USING (true);

CREATE POLICY "Enable read access for all users" ON users FOR SELECT USING (true);
CREATE POLICY "Enable all access for authenticated users" ON users FOR ALL USING (true);

CREATE POLICY "Enable read access for all users" ON facilities FOR SELECT USING (true);
CREATE POLICY "Enable all access for authenticated users" ON facilities FOR ALL USING (true);

CREATE POLICY "Enable read access for all users" ON nfc_tags FOR SELECT USING (true);
CREATE POLICY "Enable all access for authenticated users" ON nfc_tags FOR ALL USING (true);

CREATE POLICY "Enable read access for all users" ON plotkaart_data FOR SELECT USING (true);
CREATE POLICY "Enable all access for authenticated users" ON plotkaart_data FOR ALL USING (true);

CREATE POLICY "Enable read access for all users" ON incidents FOR SELECT USING (true);
CREATE POLICY "Enable all access for authenticated users" ON incidents FOR ALL USING (true);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_customers_updated_at BEFORE UPDATE ON customers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_facilities_updated_at BEFORE UPDATE ON facilities FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_nfc_tags_updated_at BEFORE UPDATE ON nfc_tags FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_incidents_updated_at BEFORE UPDATE ON incidents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Success message
SELECT 'BHV360 database schema successfully created!' as message;
`

    writeFileSync("scripts/database-schema.sql", schema)
  }

  private generateSecret(): string {
    return require("crypto").randomBytes(32).toString("hex")
  }

  private askQuestion(question: string): Promise<string> {
    return new Promise((resolve) => {
      rl.question(question, (answer) => {
        resolve(answer.trim())
      })
    })
  }
}

// Run the wizard
if (require.main === module) {
  const wizard = new BHV360SetupWizard()
  wizard.run().catch(console.error)
}

export { BHV360SetupWizard }
